// Generated by gencpp from file navigation/Position.msg
// DO NOT EDIT!


#ifndef NAVIGATION_MESSAGE_POSITION_H
#define NAVIGATION_MESSAGE_POSITION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace navigation
{
template <class ContainerAllocator>
struct Position_
{
  typedef Position_<ContainerAllocator> Type;

  Position_()
    : id(0)
    , x(0.0)
    , z(0.0)
    , angle(0.0)  {
    }
  Position_(const ContainerAllocator& _alloc)
    : id(0)
    , x(0.0)
    , z(0.0)
    , angle(0.0)  {
  (void)_alloc;
    }



   typedef int16_t _id_type;
  _id_type id;

   typedef double _x_type;
  _x_type x;

   typedef double _z_type;
  _z_type z;

   typedef double _angle_type;
  _angle_type angle;





  typedef boost::shared_ptr< ::navigation::Position_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navigation::Position_<ContainerAllocator> const> ConstPtr;

}; // struct Position_

typedef ::navigation::Position_<std::allocator<void> > Position;

typedef boost::shared_ptr< ::navigation::Position > PositionPtr;
typedef boost::shared_ptr< ::navigation::Position const> PositionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::navigation::Position_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::navigation::Position_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::navigation::Position_<ContainerAllocator1> & lhs, const ::navigation::Position_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.x == rhs.x &&
    lhs.z == rhs.z &&
    lhs.angle == rhs.angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::navigation::Position_<ContainerAllocator1> & lhs, const ::navigation::Position_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::navigation::Position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navigation::Position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navigation::Position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navigation::Position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation::Position_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation::Position_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::navigation::Position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac52e44dba22ebffb6e4c45e785ffdda";
  }

  static const char* value(const ::navigation::Position_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac52e44dba22ebffULL;
  static const uint64_t static_value2 = 0xb6e4c45e785ffddaULL;
};

template<class ContainerAllocator>
struct DataType< ::navigation::Position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "navigation/Position";
  }

  static const char* value(const ::navigation::Position_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::navigation::Position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16   id\n"
"float64 x\n"
"float64 z\n"
"float64 angle\n"
;
  }

  static const char* value(const ::navigation::Position_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::navigation::Position_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.x);
      stream.next(m.z);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Position_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::navigation::Position_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::navigation::Position_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.id);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAVIGATION_MESSAGE_POSITION_H
